{
  "p": [
    "MAPREDUCE-3070",
    "NM not able to register with RM after NM restart"
  ],
  "(1) Log information": {
    "(1.1) Roles in this case": {
      "p": [
        "NodeManager(NM): client side ResourceManager(RM): server side"
      ]
    },
    "(1.2) Symptoms": {
      "p": [
        "After stopping NM gracefully then starting NM, NM registration fails with RM with “Duplicate registration from the node” error.",
        "2011-09-23 01:50:46,705 FATAL nodemanager.NodeManager (NodeManager.java:main(204)) - Error starting NodeManager",
        "org.apache.hadoop.yarn.YarnException: Failed to Start org.apache.hadoop.yarn.server.nodemanager.NodeManager",
        "at org.apache.hadoop.yarn.service.CompositeService.start(CompositeService.java:78)",
        "at org.apache.hadoop.yarn.server.nodemanager.NodeManager.start(NodeManager.java:153)",
        "at org.apache.hadoop.yarn.server.nodemanager.NodeManager.main(NodeManager.java:202)",
        "Caused by: org.apache.avro.AvroRuntimeException: org.apache.hadoop.yarn.exceptions.impl.pb.YarnRemoteExceptionPBImpl: Duplicate registration from the node!",
        "at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.start(NodeStatusUpdaterImpl.java:141)",
        "at org.apache.hadoop.yarn.service.CompositeService.start(CompositeService.java:68)",
        "... 2 more",
        "Caused by: org.apache.hadoop.yarn.exceptions.impl.pb.YarnRemoteExceptionPBImpl: Duplicate registration from the node!",
        "at org.apache.hadoop.yarn.ipc.ProtoOverHadoopRpcEngine$Invoker.invoke(ProtoOverHadoopRpcEngine.java:142)",
        "at $Proxy13.registerNodeManager(Unknown Source)",
        "at org.apache.hadoop.yarn.server.api.impl.pb.client.ResourceTrackerPBClientImpl.registerNodeManager(ResourceTrackerPBClientImpl.java:59)NM-side implementation of this method",
        "at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.registerWithRM(NodeStatusUpdaterImpl.java:175)",
        "at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.start(NodeStatusUpdaterImpl.java:137)",
        "... 3 more"
      ]
    }
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "Based on the log, we know the error in NM side is “failed to start”.",
      "AvroRuntimeException extends from RuntimeException, and Avro is a remote procedure call and data serialization framework.",
      "There are two “caused by” parts, and the second part indicated the root error “Duplicate registration from the node”. From the callstack in this part, we know the error happens in “registerNodeManager” operation. This operation is realized through the RPC protocol ResourceTracker(this protocol is only used for NM & RM communication). Currently, the method “registerNodeManager” is already invoked in RM side through RPC, and the error “Duplicate registration from the node” is generated in RM side."
    ]
  },
  "(3) Root Cause": {
    "p": [
      "If the node manager goes down, it will be removed from the this.rmContext.getRMNodes() after completion of the expiry interval(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS), which is 10 minutes by default. Before completion of expiry interval if the same node manager comes up in the same port, RM throws IO exception saying \"Duplicate registration from the node!\" and NM fails to start with the same reason."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Referring to the discussion in the bug report:",
      "· First of all, decreasing the default time is not feasible.",
      "· Then they proposed to cleanup and register NM even if the registration is requested before the expiry of NM. This should be done together with another bug(MAPREDUCE-3034), it needs RM side changes to help duplicate registration. And NM side changes described at MAPREDUCE-3034. One problem in this solution is that, when the duplicate registration comes it is adding up the resource to cluster resource in the CapacityScheduler (in RM, since when NM registers with the RM, it will also send information about the resources available on the nodes) without checking whether the nodemanager resource is already added or not.",
      "· Finally, they think the problem can be simplified. Essentially an NM should be identified with host+port. Now on registration we can assume that host+port is unique, so the solution is that the NM comes up on a different port.",
      "This solution is implemented by using “ephemeral port”:",
      "An ephemeral port is a short-lived transport protocol port for IP communications allocated automatically from a predefined range by the IP software.The allocations are temporary and only valid for the duration of the communication session. When the connection terminates, the ephemeral port is available for reuse, although most IP stacks won't reuse that port number until the entire pool of ephemeral ports have been used.",
      "· hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java",
      "@@ -218,7 +218,7 @@",
      "",
      "/** address of node manager IPC.*/",
      "public static final String NM_ADDRESS = NM_PREFIX + \"address\";",
      "- public static final String DEFAULT_NM_ADDRESS = \"0.0.0.0:45454\";",
      "+ public static final String DEFAULT_NM_ADDRESS = \"0.0.0.0:0\";",
      "",
      "If we change it to 0.0.0.0:0,i.e. let the OS pick an ephemeral port, we don't need any further changes."
    ]
  },
  "(5) How many nodes are involved in the patch? (multiple/single node(s))": {
    "p": [
      "Since the configuration is modified, it will act on each NM."
    ]
  },
  "(6) Code Snippets": {
    "p": [
      "When NM starts, it will execute from its main function, then we can get the call-relationship based on the source code, corresponding to the call-stack in the log.",
      "public static voidmain(String[] args) {NodeManager.java",
      "StringUtils.startupShutdownMessage(NodeManager.class, args,LOG);",
      "try{",
      "NodeManager nodeManager =newNodeManager();",
      "Runtime.getRuntime().addShutdownHook(newCompositeServiceShutdownHook(nodeManager));",
      "YarnConfiguration conf =newYarnConfiguration();",
      "nodeManager.init(conf);",
      "nodeManager.start();",
      "}catch(Throwable t) {LOG.fatal(\"Error starting NodeManager\", t); System.exit(-1); }",
      "}",
      "}",
      "",
      "public voidstart(){",
      "try{ doSecureLogin();",
      "}catch(IOException e) {throw newYarnException(\"Failed NodeManager login\", e); }",
      "super.start();",
      "}",
      "",
      "public synchronized voidstart() {CompositeService.java",
      "inti =0;",
      "try{for(intn =serviceList.size(); i < n; i++) {",
      "Service service =serviceList.get(i);",
      "service.start(); // NodeManager is the last service to start",
      "}",
      "super.start();",
      "}catch(Throwable e) {LOG.error(\"Error starting services \" + getName(), e);",
      "// Note that the state of the failed service is still INITED and not",
      "// STARTED. Even though the last service is not started completely, still",
      "// call stop() on all services including failed service to make sure cleanup",
      "// happens.",
      "stop(i);",
      "throw newYarnException(\"Failed to Start \"+ getName(), e);",
      "}",
      "}",
      "",
      "public voidstart() {NodeStatusUpdaterImpl.java",
      "// NodeManager is the last service to start, so NodeId is available.",
      "this.nodeId=this.context.getNodeId();",
      "",
      "String httpBindAddressStr = getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,",
      "YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);",
      "InetSocketAddress httpBindAddress = NetUtils.createSocketAddr(httpBindAddressStr,",
      "YarnConfiguration.DEFAULT_NM_WEBAPP_PORT, YarnConfiguration.NM_WEBAPP_ADDRESS);",
      "try{ // this.hostName = InetAddress.getLocalHost().getCanonicalHostName();",
      "this.httpPort= httpBindAddress.getPort();",
      "// Registration has to be in start so that ContainerManager can get the",
      "// perNM tokens needed to authenticate ContainerTokens.",
      "registerWithRM();",
      "super.start();",
      "startStatusUpdater();",
      "}catch(Exception e) {throw newAvroRuntimeException(e); }",
      "}",
      "",
      "publicRegisterNodeManagerResponseregisterNodeManager(ResourceTrackerPBClientImpl.java",
      "RegisterNodeManagerRequest request)throwsYarnRemoteException {",
      "RegisterNodeManagerRequestProto requestProto = ((RegisterNodeManagerRequestPBImpl)request).getProto();",
      "try{",
      "return newRegisterNodeManagerResponsePBImpl(proxy.registerNodeManager(null, requestProto));",
      "}catch(ServiceException e) {java dynamic proxy",
      "if(e.getCause()instanceofYarnRemoteException) {",
      "throw(YarnRemoteException)e.getCause();",
      "}else if(e.getCause()instanceofUndeclaredThrowableException) {",
      "throw(UndeclaredThrowableException)e.getCause();",
      "}else{throw newUndeclaredThrowableException(e);",
      "}",
      "}",
      "}",
      "",
      "publicObjectinvoke(Object proxy, Method method, Object[] args)ProtoOverHadoopRpcEngine.java",
      "throwsThrowable {",
      "longstartTime =0;",
      "if(LOG.isDebugEnabled()) { startTime = System.currentTimeMillis(); }",
      "ProtoSpecificRpcRequest rpcRequest = constructRpcRequest(method, args);",
      "ProtoSpecificResponseWritable val =null;",
      "try{ val = (ProtoSpecificResponseWritable)client.call(",
      "newProtoSpecificRequestWritable(rpcRequest),remoteId);",
      "}catch(Exception e) {throw newServiceException(e); }",
      "ProtoSpecificRpcResponseresponse= val.message;",
      "……",
      "}",
      "",
      "if(response.hasIsError() && response.getIsError() ==true) {",
      "YarnRemoteExceptionPBImpl exception =newYarnRemoteExceptionPBImpl(response.getException());",
      "exception.fillInStackTrace();",
      "ServiceException se =newServiceException(exception);",
      "throwse;",
      "}",
      "Message prototype =null;",
      "try{ prototype = getReturnProtoType(method);",
      "}catch(Exception e) {throw newServiceException(e); }",
      "Message actualReturnMessage = prototype.newBuilderForType().mergeFrom(response.getResponseProto()).build();",
      "returnactualReturnMessage;",
      "}",
      "",
      "In the RM side, RPC call registerNodeManager:",
      "publicRegisterNodeManagerResponseregisterNodeManager(",
      "RegisterNodeManagerRequest request)throwsYarnRemoteException {",
      "",
      "NodeId nodeId = request.getNodeId();",
      "String host = nodeId.getHost();",
      "intcmPort = nodeId.getPort();",
      "inthttpPort = request.getHttpPort();",
      "Resource capability = request.getResource();",
      "……",
      "// Check if this node is a 'valid' node",
      "if(!this.nodesListManager.isValidNode(host)) {",
      "LOG.info(\"Disallowed NodeManager from \" + host",
      "+ \", Sending SHUTDOWN signal to the NodeManager.\");",
      "regResponse.setNodeAction(NodeAction.SHUTDOWN);",
      "response.setRegistrationResponse(regResponse);",
      "returnresponse;",
      "}",
      "RMNode rmNode =newRMNodeImpl(nodeId,rmContext, host, cmPort, httpPort,",
      "resolve(host), capability);",
      "",
      "if(this.rmContext.getRMNodes().putIfAbsent(nodeId, rmNode)!= null) {",
      "LOG.info(\"Duplicate registration from the node at: \"+ host",
      "+\", Sending SHUTDOWN Signal to the NodeManager\");",
      "regResponse.setNodeAction(NodeAction.SHUTDOWN);",
      "response.setRegistrationResponse(regResponse);",
      "returnresponse;",
      "}the code version mentioned in this bug report prints the above info, rather than “Duplicate registration from the node!”shown in the log",
      "",
      "this.rmContext.getDispatcher().getEventHandler().handle(",
      "newRMNodeEvent(nodeId, RMNodeEventType.STARTED));",
      "this.nmLivelinessMonitor.register(nodeId);",
      "LOG.info(\"NodeManager from node \" + host + \"(cmPort: \" + cmPort",
      "+ \" httpPort: \" + httpPort + \") \" + \"registered with capability: \"",
      "+ capability.getMemory() + \", assigned nodeId \" + nodeId);",
      "",
      "regResponse.setNodeAction(NodeAction.NORMAL);",
      "response.setRegistrationResponse(regResponse);",
      "returnresponse;",
      "}"
    ]
  }
}