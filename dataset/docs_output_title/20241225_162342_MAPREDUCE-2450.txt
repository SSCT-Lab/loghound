{
  "p": [
    "MAPREDUCE-2450",
    "Calls from running tasks to TaskTracker methods sometimes fail and incur a 60s timeout hangs in a corner case"
  ],
  "(1) Log information": {
    "(1.1) Roles in this case": {
      "p": [
        "mapper: client side TaskTracker:server side"
      ]
    },
    "(1.2) Symptoms": {
      "p": [
        "some map tasks in the job take 1 minute to commit after they finish the map computation. On the map side, the output looks like this:",
        "2009-03-02 21:30:54,384 INFO org.apache.hadoop.metrics.jvm.JvmMetrics: Cannot initialize JVM Metrics with processName=MAP, sessionId= - already initialized",
        "2009-03-02 21:30:54,437 INFO org.apache.hadoop.mapred.MapTask: numReduceTasks: 800",
        "2009-03-02 21:30:54,437 INFO org.apache.hadoop.mapred.MapTask: io.sort.mb = 300",
        "2009-03-02 21:30:55,493 INFO org.apache.hadoop.mapred.MapTask: data buffer = 239075328/298844160",
        "2009-03-02 21:30:55,494 INFO org.apache.hadoop.mapred.MapTask: record buffer = 786432/983040",
        "2009-03-02 21:31:00,381 INFO org.apache.hadoop.mapred.MapTask: Starting flush of map output",
        "2009-03-02 21:31:07,892 INFO org.apache.hadoop.mapred.MapTask: Finished spill 0",
        "2009-03-02 21:31:07,951 INFO org.apache.hadoop.mapred.TaskRunner: Task:attempt_200903022127_0001_m_003163_0 is done. And is in the process of commiting",
        "2009-03-02 21:32:07,949 INFO org.apache.hadoop.mapred.TaskRunner: Communication exception: java.io.IOException: Call to /127.0.0.1:50311 failed on local exception: java.nio.channels.ClosedChannelException",
        "at org.apache.hadoop.ipc.Client.wrapException(Client.java:765)",
        "at org.apache.hadoop.ipc.Client.call(Client.java:733)",
        "at org.apache.hadoop.ipc.RPC$Invoker.invoke(RPC.java:220)",
        "at org.apache.hadoop.mapred.$Proxy0.ping(Unknown Source)",
        "at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:525)",
        "at java.lang.Thread.run(Thread.java:619)",
        "Caused by: java.nio.channels.ClosedChannelException",
        "at java.nio.channels.spi.AbstractSelectableChannel.register(AbstractSelectableChannel.java:167)",
        "at java.nio.channels.SelectableChannel.register(SelectableChannel.java:254)",
        "at org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.select(SocketIOWithTimeout.java:331)",
        "at org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:157)",
        "at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:155)",
        "at org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:128)",
        "at java.io.FilterInputStream.read(FilterInputStream.java:116)",
        "at org.apache.hadoop.ipc.Client$Connection$PingInputStream.read(Client.java:276)",
        "at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)",
        "at java.io.BufferedInputStream.read(BufferedInputStream.java:237)",
        "at java.io.DataInputStream.readInt(DataInputStream.java:370)",
        "at org.apache.hadoop.ipc.Client$Connection.receiveResponse(Client.java:501)",
        "at org.apache.hadoop.ipc.Client$Connection.run(Client.java:446)",
        "2009-03-02 21:32:07,953 INFO org.apache.hadoop.mapred.TaskRunner: Task 'attempt_200903022127_0001_m_003163_0' done.",
        "In the TaskTracker log, it looks like this:",
        "2009-03-02 21:31:08,110 WARN org.apache.hadoop.ipc.Server: IPC Server Responder, call ping(attempt_200903022127_0001_m_003163_0) from 127.0.0.1:56884: output error",
        "2009-03-02 21:31:08,111 INFO org.apache.hadoop.ipc.Server: IPC Server handler 10 on 50311 caught: java.nio.channels.ClosedChannelException",
        "at sun.nio.ch.SocketChannelImpl.ensureWriteOpen(SocketChannelImpl.java:126)",
        "at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:324) at org.apache.hadoop.ipc.Server.channelWrite(Server.java:1195)",
        "at org.apache.hadoop.ipc.Server.access$1900(Server.java:77)",
        "at org.apache.hadoop.ipc.Server$Responder.processResponse(Server.java:613)",
        "at org.apache.hadoop.ipc.Server$Responder.doRespond(Server.java:677)",
        "at org.apache.hadoop.ipc.Server$Handler.run(Server.java:981)"
      ]
    }
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "• The above logs are posted in the description of the bug report, and we see that the exception is “ClosedChannelException”.",
      "When the assignee of this bug made discussion in the comments, he used the following exception withoutmentioning the above exception.",
      "java.nio.channels.ClosedByInterruptException",
      "at java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:184)",
      "at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:341)",
      "at org.apache.hadoop.net.SocketOutputStream$Writer.performIO(SocketOutputStream.java:55)",
      "at org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:142)",
      "at org.apache.hadoop.net.SocketOutputStream.write(SocketOutputStream.java:146)",
      "at org.apache.hadoop.net.SocketOutputStream.write(SocketOutputStream.java:107)",
      "at org.apache.hadoop.security.SaslOutputStream.write(SaslOutputStream.java:163)",
      "at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)",
      "at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)",
      "at java.io.DataOutputStream.flush(DataOutputStream.java:106)",
      "at org.apache.hadoop.ipc.Client$Connection.sendParam(Client.java:698)",
      "at org.apache.hadoop.ipc.Client.call(Client.java:952)",
      "at org.apache.hadoop.ipc.RPC$Invoker.invoke(RPC.java:222)",
      "at $Proxy1.statusUpdate(Unknown Source)",
      "at org.apache.hadoop.mapred.Task$TaskReporter.run(Task.java:625)",
      "at java.lang.Thread.run(Thread.java:619)",
      "• “ClosedChannelException” throws when an attempt is made to invoke or complete an I/O operation upon channel that is closed, or at least closed to that operation.",
      "“ClosedByInterruptException” received by a thread when another thread interrupts it while it is blocked in an I/O operation upon a channel.",
      "• Comparing the call-stacks of these two exceptions, we can see the method invoked in “TaskReporter.run” is “Ping” and “statusUpdate” respectively. And we know that Task.TaskReporter thread sends status updates/pings periodically to TaskTracker. So we can infer that both these two exceptions are resulted from the communication thread’s interruption, but happens at different time.",
      ""
    ]
  },
  "(3) Root Cause": {
    "p": [
      "(a)Task.TaskReporter thread sends status updates/pings periodically to TaskTracker. Default",
      "\"PROGRESS_INTERVAL\" is set to 3000 ms. If it needs to send the task progress, it sends STATUS_UPDATE message to TaskTracker. Otherwise, it sends a PING signal to check if the TaskTracker is alive.",
      "(b)When the map phase is over, it calls TaskReporter.stopCommunicationThread() which interrupts this thread.",
      "(c)If the system was trying to commnuicate with the server at the time of interrupts, it breaks the connection to the server. Since the interrupt was issued, the stream throws ClosedByInterruptException and doesn't send any information.",
      "(d)At this time, if the system was trying to “ping” TT, it will do the following operations;",
      "In ipc.Client.java, ipc.Client keeps waiting for the response in",
      "Client->Connection->receiveResponse()->readInt(). After the \"ipc.ping.interval\", it basically",
      "timesout and throws ClosedChannelException.",
      "Since the default \"ipc.ping.value\" is set to 60000ms, it waits for 1 minute before throwing this exception."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "The patch adds a synchronization mechanism for the communication thread. When the communication thread is still communicating with TT, it will not be interrupted.",
      "The fixes are also marked in part(6):code snippets.",
      "",
      "• hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "@@ -552,6 +552,8 @@ abstract public class Task implements Writable, Configurable {",
      "private InputSplit split = null;",
      "private Progress taskProgress;",
      "private Thread pingThread = null;",
      "+ private boolean done = true;",
      "+ private Object lock = new Object();class TaskReporter is defined in Task.java.",
      "Add a member “lock” in this class, it is used for synchronization.",
      "",
      "/**",
      "* flag that indicates whether progress update needs to be sent to parent.",
      "@@ -648,6 +650,9 @@ abstract public class Task implements Writable, Configurable {",
      "// get current flag value and reset it as well",
      "boolean sendProgress = resetProgressFlag();",
      "while (!taskDone.get()) {",
      "+ synchronized (lock) {",
      "+ done = false;As long as current task is not finished, set “done=false” at the beginning in each loop.",
      "+ }",
      "try {",
      "boolean taskFound = true; // whether TT knows about this task",
      "// sleep for a bit",
      "@@ -680,6 +685,7 @@ abstract public class Task implements Writable, Configurable {",
      "// came back up), kill ourselves",
      "if (!taskFound) {",
      "LOG.warn(\"Parent died. Exiting \"+taskId);",
      "+ resetDoneFlag();",
      "System.exit(66);",
      "}",
      "",
      "@@ -692,10 +698,19 @@ abstract public class Task implements Writable, Configurable {",
      "if (remainingRetries == 0) {",
      "ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);",
      "LOG.warn(\"Last retry, killing \"+taskId);",
      "+ resetDoneFlag();",
      "System.exit(65);",
      "}",
      "}",
      "}",
      "+ //Notify that we are done with the work",
      "+ resetDoneFlag();",
      "+ }",
      "+ void resetDoneFlag() {",
      "+ synchronized (lock) {",
      "+ done = true;",
      "+ lock.notify();When the taskReporter really finishes the communication task, “lock.notify()” will wake up the “lock.wait()”, then the communication thread can be interrupted.",
      "+ }",
      "}",
      "public void startCommunicationThread() {",
      "if (pingThread == null) {",
      "@@ -706,6 +721,11 @@ abstract public class Task implements Writable, Configurable {",
      "}",
      "public void stopCommunicationThread() throws InterruptedException {",
      "if (pingThread != null) {",
      "+ synchronized (lock) {",
      "+ while (!done) {",
      "+ lock.wait();it will wait till “lock.notify” wakes it up.",
      "+ }",
      "+ }",
      "pingThread.interrupt();",
      "pingThread.join();",
      "}"
    ]
  },
  "(5) How many nodes are involved in the patch? (multiple/single node(s))": {
    "p": [
      "Both Class MapTask and Class ReduceTask extend from Class Task(Task.java), and they will get the object TaskReporter from Task.java. So the fixes in Task.java will act on every Map/Reduce task. When running a job, there may be several mapper and reducers (running on multiple node), so the fixes will affect multiple nodes."
    ]
  },
  "(6) Code Snippets": {
    "p": [
      "The following communicationThread is used between Task and TT, here is a MapTask.",
      "public voidstartCommunicationThread() {",
      "if(pingThread==null) {",
      "pingThread=newThread(this,\"communication thread\");",
      "pingThread.setDaemon(true);",
      "pingThread.start();",
      "}",
      "}",
      "",
      "TaskReporter.run() { …Task.java",
      "final intMAX_RETRIES =3;",
      "intremainingRetries = MAX_RETRIES;",
      "// get current flag value and reset it as well",
      "booleansendProgress = resetProgressFlag();",
      "while(!taskDone.get()) {",
      "+ synchronized (lock) {",
      "+ done = false;",
      "+ }",
      "try{",
      "booleantaskFound =true; // whether TT knows about this task",
      "",
      "// sleep for a bit",
      "…",
      "if(sendProgress) { // we need to send progress update",
      "updateCounters();",
      "taskStatus.statusUpdate(taskProgress.get(), taskProgress.toString(), counters);",
      "taskFound =umbilical.statusUpdate(taskId, taskStatus);",
      "taskStatus.clearStatus();(Due to the RPC mechanism in Hadoop, when the client calls some method of TaskUmbilicalProtocol, it will jump to “invoke” method, which implements the InvocationHandler interface.)",
      "}",
      "else{",
      "// send ping",
      "taskFound =umbilical.ping(taskId);(based on the log, ping() is called)",
      "}",
      "",
      "// if Task Tracker is not aware of our task ID (probably because it died and",
      "// came back up), kill ourselves",
      "if(!taskFound) {",
      "LOG.warn(\"Parent died. Exiting “+taskId);",
      "+ resetDoneFlag();",
      "System.exit(66);",
      "}",
      "sendProgress = resetProgressFlag();",
      "remainingRetries = MAX_RETRIES;",
      "}",
      "catch(Throwable t) {",
      "LOG.info(\"Communication exception: \"+ StringUtils.stringifyException(t));",
      "remainingRetries -=1;",
      "if(remainingRetries ==0) {",
      "ReflectionUtils.logThreadInfo(LOG, \"Communication exception\", 0);",
      "LOG.warn(\"Last retry, killing \"+taskId);",
      "+ resetDoneFlag();",
      "System.exit(65);",
      "}",
      "}",
      "}//while",
      "+ //Notify that we are done with the work",
      "+ resetDoneFlag();",
      "}",
      "+",
      "+ void resetDoneFlag() {",
      "+ synchronized (lock) {",
      "+ done = true;",
      "+ lock.notify();",
      "+ }",
      "+ }",
      "+",
      "",
      "WritableRpcEngine.java",
      "publicObjectinvoke(Object proxy, Method method, Object[] args)throwsThrowable{…",
      "ObjectWritable value = (ObjectWritable)client.call(newInvocation(method, args),remoteId);",
      "…",
      "}",
      "",
      "",
      "",
      "ipc/Client.java",
      "//Make a call, passing param, to the IPC server defined by remoteId, returning the value.",
      "//Throws exceptions if there are network problems or if the remote code throws an exception.",
      "publicWritablecall(Writable param, ConnectionId remoteId)throwsInterruptedException,IOException{",
      "Call call =newCall(param);",
      "Connection connection =getConnection(remoteId, call);",
      "connection.sendParam(call); // send the parameter",
      "booleaninterrupted =false;",
      "synchronized(call) {",
      "while(!call.done) {",
      "try{call.wait();// wait for the result",
      "}catch(InterruptedExceptionie) {",
      "// save the fact that we were interrupted",
      "interrupted =true; }",
      "}",
      "if(interrupted) {",
      "// set the interrupt flag now that we are done waiting",
      "Thread.currentThread().interrupt();",
      "}",
      "if(call.error!=null) {",
      "if(call.errorinstanceofRemoteException) { call.error.fillInStackTrace();throwcall.error;",
      "}else{ // local exception",
      "throwwrapException(remoteId.getAddress(), call.error); }",
      "}else{returncall.value; }",
      "}",
      "}",
      "",
      "/** Get a connection from the pool, or create a new one and add it to the pool. Connections to a given ConnectionId are reused. */",
      "privateConnectiongetConnection(ConnectionId remoteId, Call call)",
      "throwsIOException, InterruptedException {…",
      "Connection connection;",
      "…",
      "do{synchronized(connections) { … }",
      "}while(!connection.addCall(call));",
      "…",
      "connection.setupIOstreams();",
      "returnconnection;",
      "}",
      "",
      "/** Connect to the server and set up the I/O streams. It then sends a header to the server and starts",
      "the connection thread that waits for responses. */",
      "private synchronized voidsetupIOstreams()throwsInterruptedException {",
      "if(socket != null || shouldCloseConnection.get()) {return; }",
      "try{…",
      "while(true) {",
      "setupConnection();",
      "InputStream inStream = NetUtils.getInputStream(socket);",
      "OutputStream outStream = NetUtils.getOutputStream(socket);",
      "writeRpcHeader(outStream);",
      "if(useSasl) {…}",
      "if(doPing) {this.in=newDataInputStream(newBufferedInputStream(newPingInputStream(inStream)));",
      "}else{this.in=newDataInputStream(newBufferedInputStream(inStream)); }",
      "this.out=newDataOutputStream(newBufferedOutputStream(outStream));",
      "writeHeader();",
      "touch(); // update last activity time",
      "start(); // start the receiver thread after the socket connection has been set up",
      "return;",
      "}",
      "}catch(Throwable t) {…}",
      "}",
      "",
      "public voidrun(){",
      "…",
      "try{while(waitForWork()) {//wait here for work - read or close connection",
      "receiveResponse();",
      "}",
      "}catch(Throwable t) {… }",
      "…",
      "}",
      "",
      "",
      "private voidreceiveResponse() {",
      "if(shouldCloseConnection.get()) {return; }",
      "touch();",
      "try{intid = in.readInt();// try to read an id",
      "…",
      "Call call = calls.get(id);",
      "intstate =in.readInt();// read call status",
      "if(state == Status.SUCCESS.state) { … }",
      "else if(state == Status.ERROR.state) { … }",
      "else if(state == Status.FATAL.state) { … }",
      "}catch(IOException e) { markClosed(e); }",
      "}",
      "",
      "",
      "privateIOExceptionwrapException(InetSocketAddress addr, IOException exception) {",
      "if(exceptioninstanceofConnectException) {",
      "//connection refused; include the host:port in the error",
      "return(ConnectException)newConnectException(",
      "\"Call to \" + addr + \" failed on connection exception: \" + exception).initCause(exception);",
      "} else if (exception instanceof SocketTimeoutException) {",
      "return (SocketTimeoutException)new SocketTimeoutException(",
      "\"Call to \" + addr + \" failed on socket timeout exception: \" + exception).initCause(exception);",
      "}else{return(IOException)newIOException(",
      "\"Call to \"+ addr +\" failed on local exception: \"+ exception).initCause(exception);",
      "}",
      "}",
      "",
      "in TT side, TT implements the interface of TaskUmbilicalProtocol",
      "/** Child checking to see if we're alive. Normally does nothing.*/",
      "public synchronized booleanping(TaskAttemptID taskid)throwsIOException {",
      "ensureAuthorizedJVM(taskid.getJobID());",
      "returntasks.get(taskid) !=null;",
      "}",
      "",
      "According to TT’s log, we can get the point which throws ClosedChannelException.",
      "In ipc.Server.java, Handler.run() is as follows:",
      "public voidrun() {…",
      "while(running) {",
      "try{finalCall call =callQueue.take(); // pop the queue; maybe blocked here",
      "…",
      "CurCall.set(call);",
      "…",
      "CurCall.set(null);",
      "synchronized(call.connection.responseQueue) {",
      "// setupResponse() needs to be sync'ed together with responder.doResponse() since setupResponse may use",
      "// SASL to encrypt response data and SASL enforces its own message ordering.",
      "…",
      "// Discard the large buf and reset it back to smaller size to free up heap",
      "if(buf.size() >maxRespSize) {LOG.warn(\"Large response size \"+ buf.size() +\" for call \"+ call.toString());",
      "buf =newByteArrayOutputStream(INITIAL_RESP_BUF_SIZE);",
      "}",
      "responder.doRespond(call);",
      "}",
      "}catch(InterruptedException e) {…",
      "}catch(Exception e) {LOG.info(getName() +\" caught an exception\",e); }",
      "}",
      "LOG.info(getName() +\": exiting\");",
      "}",
      "",
      "// Enqueue a response from the application.",
      "voiddoRespond(Call call)throwsIOException {Server.java",
      "synchronized(call.connection.responseQueue) {",
      "call.connection.responseQueue.addLast(call);",
      "if(call.connection.responseQueue.size() == 1) {processResponse(call.connection.responseQueue,true); }",
      "}",
      "}",
      "Server.java",
      "// Processes one response. Returns true if there are no more pending data for this channel.",
      "private booleanprocessResponse(LinkedList<Call> responseQueue,booleaninHandler)throwsIOException",
      "{booleanerror =true;",
      "booleandone =false; // there is more data for this channel.",
      "intnumElements =0;",
      "Call call =null;",
      "try{",
      "synchronized(responseQueue) {",
      "// If there are no items for this channel, then we are done",
      "…",
      "// Extract the first call",
      "…",
      "// Send as much data as we can in the non-blocking fashion",
      "intnumBytes =channelWrite(channel, call.response);",
      "if(numBytes <0) {",
      "return true;",
      "}",
      "if(!call.response.hasRemaining()) { call.connection.decRpcCount();",
      "if(numElements ==1) { // last call fully processes.",
      "done =true; // no more data for this channel.",
      "}else{ done =false; // more calls pending to be sent. }",
      "…",
      "}else{ // If we were unable to write the entire response out, then insert in Selector queue.",
      "call.connection.responseQueue.addFirst(call);",
      "if(inHandler) { // set the serve time when the response has to be sent later",
      "call.timestamp= System.currentTimeMillis();",
      "incPending();",
      "try{ // Wakeup the thread blocked on select, only then can the call to channel.register() complete.",
      "writeSelector.wakeup();",
      "channel.register(writeSelector, SelectionKey.OP_WRITE, call);",
      "}catch(ClosedChannelException e) { //Its ok. channel might be closed else where.",
      "done =true;",
      "}finally{ decPending(); }",
      "}",
      "…",
      "}",
      "error =false; // everything went off well",
      "}",
      "}finally{",
      "if(error && call !=null) {LOG.warn(getName()+\", call \"+ call +\": output error\");",
      "done =true; // error. no more data for this channel.",
      "closeConnection(call.connection);",
      "}",
      "}",
      "returndone;",
      "}",
      "",
      "private intchannelWrite(WritableByteChannel channel, ByteBuffer buffer)throwsIOException {",
      "intcount = (buffer.remaining() <=NIO_BUFFER_LIMIT) ? channel.write(buffer) :channelIO(null, channel, buffer);",
      "if(count >0) {rpcMetrics.incrSentBytes(count); }",
      "returncount;",
      "}",
      "public intwrite(ByteBuffer var1)throwsIOException {SocketChannelImpl.class",
      "if(var1 ==null) {throw newNullPointerException();",
      "}else{",
      "Object var2 =this.writeLock;",
      "synchronized(this.writeLock) {",
      "this.ensureWriteOpen();",
      "intvar3 =0;",
      "Object var4 = IoTrace.socketWriteBegin();",
      "booleanvar21 =false;",
      "bytevar6;",
      "…",
      "this.writerCleanup();",
      "IoTrace.socketWriteEnd(var4,this.remoteAddress.getAddress(),this.remoteAddress.getPort(), var3 >0?(long)var3:0L);",
      "this.end(var3 >0|| var3 == -2);",
      "Object var7 =this.stateLock;",
      "synchronized(this.stateLock) {",
      "if(var3 <=0&& !this.isOutputOpen) {throw newAsynchronousCloseException(); }",
      "}",
      "assertIOStatus.check(var3);",
      "returnvar6;",
      "}",
      "}",
      "}",
      "private voidensureWriteOpen()throwsClosedChannelException {SocketChannelImpl.class",
      "Object var1 =this.stateLock;",
      "synchronized(this.stateLock) {",
      "if(!this.isOpen()) {throw newClosedChannelException();",
      "}else if(!this.isOutputOpen) {throw newClosedChannelException();",
      "}else if(!this.isConnected()) {throw newNotYetConnectedException();",
      "}",
      "}",
      "}"
    ]
  }
}