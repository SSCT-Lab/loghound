{
  "p": [
    "Cassandra-2525",
    "CQL: create keyspace does not the replication factor argument and allows invalid sql to pass thru"
  ],
  "(1) Log information": {
    "p": [
      "Ran the following SQL in cqlsh and immediately received a socket closed error.",
      "create keyspace testcli with replication_factor=1",
      "and placement_strategy = 'org.apache.cassandra.locator.SimpleStrategy';",
      "After that point, I couldn't run nodetool, and then got an exception starting up the cluster.",
      "ERROR 01:29:26,989 Exception encountered during startup.",
      "java.lang.RuntimeException: org.apache.cassandra.config.ConfigurationException: SimpleStrategy requires a replication_factor strategy option.",
      "at org.apache.cassandra.db.Table.<init>(Table.java:278)",
      "at org.apache.cassandra.db.Table.open(Table.java:110)",
      "at org.apache.cassandra.service.AbstractCassandraDaemon.setup(AbstractCassandraDaemon.java:160)",
      "at org.apache.cassandra.service.AbstractCassandraDaemon.activate(AbstractCassandraDaemon.java:314)",
      "at org.apache.cassandra.thrift.CassandraDaemon.main(CassandraDaemon.java:80)",
      "Caused by: org.apache.cassandra.config.ConfigurationException: SimpleStrategy requires a replication_factor strategy option.",
      "at org.apache.cassandra.locator.SimpleStrategy.validateOptions(SimpleStrategy.java:79)",
      "at org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(AbstractReplicationStrategy.java:262)",
      "at org.apache.cassandra.db.Table.createReplicationStrategy(Table.java:328)",
      "at org.apache.cassandra.db.Table.<init>(Table.java:274)",
      "... 4 more"
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "Based on the description, when submitting an invalid command, there is no instant response on this except a socket closed error. The ERROR occurs only when restarting the cluster.",
      "",
      "When submitting the query, Cassandra.Processor. execute_cql_query.process()-> CassandraServer.execute_cql_query() -> QueryProcessor.process()",
      "public voidprocess(intseqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)throwsorg.apache.thrift.TException",
      "{",
      "execute_cql_query_args args =newexecute_cql_query_args();",
      "...",
      "execute_cql_query_result result =newexecute_cql_query_result();",
      "try{",
      "result.success=iface_.execute_cql_query(args.query, args.compression);",
      "}catch(InvalidRequestExceptionire) {",
      "result.ire= ire;",
      "}catch(UnavailableException ue) {...",
      "}catch(TimedOutException te) {...",
      "}catch(SchemaDisagreementException sde) {...",
      "}catch(Throwable th) {...}",
      "oprot.writeMessageBegin(neworg.apache.thrift.protocol.TMessage(\"execute_cql_query\", org.apache.thrift.protocol.TMessageType.REPLY, seqid));",
      "result.write(oprot);",
      "oprot.writeMessageEnd();",
      "oprot.getTransport().flush();",
      "}",
      "",
      "publicCqlResultexecute_cql_query(ByteBuffer query, Compression compression)",
      "throwsInvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException",
      "{ ...",
      "try{",
      "returnQueryProcessor.process(queryString, state());",
      "}",
      "catch(RecognitionException e)",
      "{",
      "InvalidRequestException ire =newInvalidRequestException(\"Invalid or malformed CQL query string\");",
      "ire.initCause(e);",
      "throwire;",
      "}",
      "}",
      "",
      "and the process() is as follows:",
      "public staticCqlResultprocess(String queryString, ClientState clientState)",
      "throwsRecognitionException, UnavailableException,InvalidRequestException, TimedOutException, SchemaDisagreementException",
      "{ ...",
      "switch(statement.type)",
      "{ ...",
      "caseCREATE_KEYSPACE:",
      "CreateKeyspaceStatement create = (CreateKeyspaceStatement)statement.statement;",
      "create.validate();",
      "clientState.hasKeyspaceListAccess(Permission.WRITE);",
      "...",
      "caseCREATE_COLUMNFAMILY: ...",
      "...",
      "}",
      "return null;// We should never get here.",
      "}",
      "",
      "public voidvalidate()throwsInvalidRequestExceptionCreateKeyspaceStatement.java",
      "{",
      "// keyspace name",
      "if(!name.matches(\"\\\\w+\"))",
      "throw newInvalidRequestException(String.format(\"\\\"%s\\\"is not a valid keyspace name\",name));",
      "// required",
      "if(!attrs.containsKey(\"strategy_class\"))",
      "throw newInvalidRequestException(\"missing required argument\\\"strategy_class\\\"\");",
      "strategyClass=attrs.get(\"strategy_class\");",
      "// optional",
      "for(String key :attrs.keySet())",
      "if((key.contains(\":\")) && (key.startsWith(\"strategy_options\")))",
      "strategyOptions.put(key.split(\":\")[1],attrs.get(key));",
      "}",
      "There is no corresponding checking in validate() for the case in this bug."
    ]
  },
  "(3) Root Cause": {
    "p": [
      "When submitting an invalid command, there is no instant response on this except a socket closed error. The ERROR occurs only when restarting the cluster.",
      "The incorrect command should be rejected early."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Add error handling. Expose the error.",
      "Blocked the invalid command and throws InvalidRequestException. So that the error can be exposed to the client.",
      "â€¢src/java/org/apache/cassandra/cql/CreateKeyspaceStatement.java",
      "public voidvalidate()throwsInvalidRequestException",
      "{",
      "// keyspace name",
      "if(!name.matches(\"\\\\w+\"))",
      "throw newInvalidRequestException(String.format(\"\\\"%s\\\"is not a valid keyspace name\",name));",
      "",
      "// required",
      "if(!attrs.containsKey(\"strategy_class\"))",
      "throw newInvalidRequestException(\"missing required argument\\\"strategy_class\\\"\");",
      "strategyClass=attrs.get(\"strategy_class\");",
      "",
      "// optional",
      "for(String key :attrs.keySet())",
      "if((key.contains(\":\")) && (key.startsWith(\"strategy_options\")))",
      "strategyOptions.put(key.split(\":\")[1],attrs.get(key));",
      "",
      "+// trial run to let ARS validate class + per-class options",
      "+try",
      "+{",
      "+AbstractReplicationStrategy.createReplicationStrategy(name,",
      "+AbstractReplicationStrategy.getClass(strategyClass),",
      "+StorageService.instance.getTokenMetadata(),",
      "+DatabaseDescriptor.getEndpointSnitch(),",
      "+strategyOptions);",
      "+}",
      "+catch(ConfigurationException e)",
      "+{",
      "+throw newInvalidRequestException(e.getMessage());",
      "+}",
      "}",
      "",
      ""
    ]
  }
}