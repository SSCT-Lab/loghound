{
  "p": [
    "Cassandra-5529",
    "thrift_max_message_length_in_mb makes long-lived connections error out"
  ],
  "(1) Log information": {
    "p": [
      "When running mapreduce jobs that read directly from cassandra, the job will sometimes fail with an exception like this:",
      "WARN org.apache.hadoop.mapred.Child: Error running child",
      "java.lang.RuntimeException: com.rockmelt.org.apache.thrift.TException: Message length exceeded: 40",
      "at org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.maybeInit(ColumnFamilyRecordReader.java:400)",
      "at org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.computeNext(ColumnFamilyRecordReader.java:406)",
      "at org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.computeNext(ColumnFamilyRecordReader.java:329)",
      "at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)",
      "at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138)",
      "at org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getProgress(ColumnFamilyRecordReader.java:109)",
      "at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.getProgress(MapTask.java:522)",
      "at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:547)",
      "at org.apache.hadoop.mapreduce.MapContext.nextKeyValue(MapContext.java:67)",
      "at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:143)",
      "at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:771)",
      "at org.apache.hadoop.mapred.MapTask.run(MapTask.java:375)",
      "at org.apache.hadoop.mapred.Child$4.run(Child.java:255)",
      "at java.security.AccessController.doPrivileged(Native Method)",
      "at javax.security.auth.Subject.doAs(Subject.java:396)",
      "at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1132)",
      "at org.apache.hadoop.mapred.Child.main(Child.java:249)",
      "Caused by: com.rockmelt.org.apache.thrift.TException: Message length exceeded: 40",
      "at com.rockmelt.org.apache.thrift.protocol.TBinaryProtocol.checkReadLength(TBinaryProtocol.java:393)",
      "at com.rockmelt.org.apache.thrift.protocol.TBinaryProtocol.readBinary(TBinaryProtocol.java:363)",
      "at org.apache.cassandra.thrift.Column.read(Column.java:528)",
      "at org.apache.cassandra.thrift.ColumnOrSuperColumn.read(ColumnOrSuperColumn.java:507)",
      "at org.apache.cassandra.thrift.KeySlice.read(KeySlice.java:408)",
      "at org.apache.cassandra.thrift.Cassandra$get_range_slices_result.read(Cassandra.java:12422)",
      "at com.rockmelt.org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:78)",
      "at org.apache.cassandra.thrift.Cassandra$Client.recv_get_range_slices(Cassandra.java:696)",
      "at org.apache.cassandra.thrift.Cassandra$Client.get_range_slices(Cassandra.java:680)",
      "at org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.maybeInit(ColumnFamilyRecordReader.java:362)",
      "... 16 more",
      "INFO org.apache.hadoop.mapred.Task: Runnning cleanup for the task"
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "The WARN message happens on Thrift client side. Based on the exception stack trace, we see the initial exception is triggered in TBinaryProtocol.checkReadLength().",
      "protected voidcheckReadLength(intlength)throwsTException {",
      "if(length <0) {",
      "throw newTException(\"Negative length: \"+ length);",
      "}else{",
      "if(this.checkReadLength_) {",
      "this.readLength_ -= length;",
      "if(this.readLength_ <0) {",
      "throw newTException(\"Message length exceeded: \"+ length);",
      "}",
      "}",
      "",
      "}",
      "}",
      "And in TBinaryProtocol.java, checkReadLength() is called by several read-related operations, such as readStringBody(), readBinary(), readAll().",
      "",
      "The value of readLength is set when a TBinaryProtocol is created in ColumnFamilyRecordReader#initialize():",
      "public voidinitialize(InputSplit split, TaskAttemptContext context)throwsIOException",
      "{...",
      "try",
      "{// only need to connect once",
      "if(socket!=null&&socket.isOpen())",
      "return;",
      "",
      "// create connection using thrift",
      "String location = getLocation();",
      "socket=newTSocket(location, ConfigHelper.getInputRpcPort(conf));",
      "TTransport transport = ConfigHelper.getInputTransportFactory(conf).openTransport(socket, conf);",
      "TBinaryProtocol binaryProtocol =newTBinaryProtocol(transport, ConfigHelper.getThriftMaxMessageLength(conf));",
      "client=newCassandra.Client(binaryProtocol);",
      "",
      "// log in",
      "...",
      "}",
      "...",
      "}",
      "Since mapreduce jobs read directly from Cassandra, each time when reading the data, checkReadLength() is called and the value of readLength will be checked and decreased, until the value goes negative and the exception is thrown. When reading a lot of data, this will happen."
    ]
  },
  "(3) Root Cause": {
    "p": [
      "When reading data frequently from Cassandra through the same connection, the thrift message length is checked and decreased incorrectly, which finally triggers the exception.",
      "The error occurs on RPC server side."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Fixing the error. Remove the unreasonable design. Remove the limit for thrift message size. Updating the current TBinaryProtocol.",
      "路/src/java/org/apache/cassandra/config/DatabaseDescriptor.java",
      "@@ -316,11 +316,6 @@ public class DatabaseDescriptor",
      "if (conf.thrift_framed_transport_size_in_mb <= 0)",
      "throw new ConfigurationException(\"thrift_framed_transport_size_in_mb must be positive\");",
      "",
      "- if (conf.thrift_framed_transport_size_in_mb > 0 && conf.thrift_max_message_length_in_mb < conf.thrift_framed_transport_size_in_mb)",
      "- {",
      "- throw new ConfigurationException(\"thrift_max_message_length_in_mb must be greater than thrift_framed_transport_size_in_mb when using TFramedTransport\");",
      "- }",
      "-",
      "/* end point snitch */",
      "if (conf.endpoint_snitch == null)",
      "{",
      "@@ -582,11 +577,6 @@ public class DatabaseDescriptor",
      "return authority;",
      "}",
      "",
      "- public static int getThriftMaxMessageLength()",
      "- {",
      "- return conf.thrift_max_message_length_in_mb * 1024 * 1024;",
      "- }",
      "-",
      "public static int getThriftFramedTransportSize()",
      "{",
      "return conf.thrift_framed_transport_size_in_mb * 1024 * 1024;",
      "",
      "",
      "路/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java",
      "@@ -162,7 +162,7 @@ public class ColumnFamilyRecordReader extends RecordReader<ByteBuffer, SortedMap",
      "String location = getLocation();",
      "socket = new TSocket(location, ConfigHelper.getInputRpcPort(conf));",
      "TTransport transport = ConfigHelper.getInputTransportFactory(conf).openTransport(socket, conf);",
      "- TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, ConfigHelper.getThriftMaxMessageLength(conf));",
      "+ TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, true, true);",
      "client = new Cassandra.Client(binaryProtocol);",
      "",
      "// log in",
      "",
      "路/src/java/org/apache/cassandra/hadoop/ConfigHelper.java",
      "@@ -77,7 +77,6 @@ public class ConfigHelper",
      "private static final String INPUT_TRANSPORT_FACTORY_CLASS = \"cassandra.input.transport.factory.class\";",
      "private static final String OUTPUT_TRANSPORT_FACTORY_CLASS = \"cassandra.output.transport.factory.class\";",
      "private static final String THRIFT_FRAMED_TRANSPORT_SIZE_IN_MB = \"cassandra.thrift.framed.size_mb\";",
      "-private static final String THRIFT_MAX_MESSAGE_LENGTH_IN_MB = \"cassandra.thrift.message.max_size_mb\";",
      "",
      "private static final Logger logger = LoggerFactory.getLogger(ConfigHelper.class);",
      "",
      "@@ -482,18 +481,10 @@ public class ConfigHelper",
      "return conf.getInt(THRIFT_FRAMED_TRANSPORT_SIZE_IN_MB, 15) * 1024 * 1024; // 15MB is default in Cassandra",
      "}",
      "",
      "+ @Deprecated",
      "public static void setThriftMaxMessageLengthInMb(Configuration conf, int maxMessageSizeInMB)",
      "{",
      "- conf.setInt(THRIFT_MAX_MESSAGE_LENGTH_IN_MB, maxMessageSizeInMB);",
      "- }",
      "-",
      "- /**",
      "- * @param conf The configuration to use.",
      "- * @return Value (converts MBs to Bytes) set by {@link setThriftMaxMessageLengthInMb(Configuration, int)} or default of 16MB",
      "- */",
      "- public static int getThriftMaxMessageLength(Configuration conf)",
      "- {",
      "- return conf.getInt(THRIFT_MAX_MESSAGE_LENGTH_IN_MB, 16) * 1024 * 1024; // 16MB is default in Cassandra",
      "+ // SEE CASSANDRA-5529",
      "}",
      "",
      "public static CompressionParameters getOutputCompressionParamaters(Configuration conf)",
      "@@ -557,7 +548,7 @@ public class ConfigHelper",
      "{",
      "TSocket socket = new TSocket(host, port);",
      "TTransport transport = getInputTransportFactory(conf).openTransport(socket, conf);",
      "- return new Cassandra.Client(new TBinaryProtocol(transport, getThriftMaxMessageLength(conf)));",
      "+ return new Cassandra.Client(new TBinaryProtocol(transport, true, true));",
      "}",
      "catch (LoginException e)",
      "{",
      "",
      "路/src/java/org/apache/cassandra/thrift/TBinaryProtocol.java",
      "@@ -31,20 +31,6 @@ import java.nio.ByteBuffer;",
      "",
      "public class TBinaryProtocol extends org.apache.thrift.protocol.TBinaryProtocol",
      "{",
      "-",
      "- public TBinaryProtocol(TTransport trans)",
      "- {",
      "- this(trans, false, true);",
      "- }",
      "-",
      "- public TBinaryProtocol(TTransport trans, int readLength)",
      "- {",
      "- this(trans);",
      "-",
      "- if (readLength > 0)",
      "- setReadLength(readLength);",
      "- }",
      "-",
      "public TBinaryProtocol(TTransport trans, boolean strictRead, boolean strictWrite)",
      "{",
      "super(trans);",
      "@@ -64,11 +50,6 @@ public class TBinaryProtocol extends org.apache.thrift.protocol.TBinaryProtocol",
      "super(strictRead, strictWrite, 0);",
      "}",
      "",
      "- public Factory(boolean strictRead, boolean strictWrite, int readLength)",
      "- {",
      "- super(strictRead, strictWrite, readLength);",
      "- }",
      "-",
      "public TProtocol getProtocol(TTransport trans)",
      "{",
      "TBinaryProtocol protocol = new TBinaryProtocol(trans, strictRead_, strictWrite_);"
    ]
  }
}