{
  "p": [
    "Cassandra-2948",
    "Nodetool move fails to stream out data from moved node to new endpoint."
  ],
  "(1) Log information": {
    "p": [
      "When moving a node in the ring with nodetool move, that node streams its data to itself instead of to the new endpoint responsible for its old range.",
      "Selected log messages from node A (10.2.129.41):",
      "INFO [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:17,075 StorageService.java (line 1878) Moving miles/10.2.129.41 from Token(bytes[00]) to Token(bytes[07]).",
      "DEBUG [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:17,080 StorageService.java (line 1941) Table ks: work map",
      "{/10.2.129.16=[(Token(bytes[04]),Token(bytes[07])]]}.",
      "INFO [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:17,080 StorageService.java (line 1946) Sleeping 30000 ms before start streaming/fetching ranges.",
      "...",
      "INFO [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:46,728 StorageService.java (line 522) Moving: fetching new ranges and streaming old ranges",
      "DEBUG [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:46,728 StorageService.java (line 1960) [Move->STREAMING] Work Map: {ks={(Token(bytes[0c]),Token(bytes[00])]=[miles/10.2.129.41]}}",
      "DEBUG [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:46,729 StorageService.java (line 1965) [Move->FETCHING] Work Map: {ks={/10.2.129.16=[(Token(bytes[04]),Token(bytes[07])]]}}",
      "DEBUG [RMI TCP Connection(6)-10.2.129.41] 2011-07-26 16:29:46,730 StorageService.java (line 2411) Requesting from /10.2.129.16 ranges (Token(bytes[04]),Token(bytes[07])]",
      "...",
      "INFO[StreamStage:1] 2011-07-26 16:29:46,737 StreamOut.java (line 90) Beginningtransfer to miles/10.2.129.41",
      "DEBUG [StreamStage:1] 2011-07-26 16:29:46,737 StreamOut.java (line 91) Ranges are (Token(bytes[0c]),Token(bytes[00])]"
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "The above log from node-A, and the INFO marked in red shows that node-A is transferring ranges to itself.",
      "Based on the log entries printed before the problematic INFO, we can find the corresponding source code where these messages are printed.",
      "The error happens when executing “nodetool move”, so StorageService.move() is invoked. The call relationship of the following three methods is: move() -> streamRanges() -> transferRanges().",
      "private voidmove(Token newToken)throwsIOException",
      "{",
      "...",
      "// address of the current node",
      "InetAddress localAddress = FBUtilities.getLocalAddress();",
      "List<String> tablesToProcess = DatabaseDescriptor.getNonSystemTables();",
      "",
      "// checking if data is moving to this node",
      "for(String table : tablesToProcess)",
      "{",
      "if(tokenMetadata_.getPendingRanges(table, localAddress).size() >0)",
      "throw newUnsupportedOperationException(\"data is currently moving to this node; unable to leave the ring\");",
      "}",
      "",
      "// setting 'moving' application state",
      "Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS,valueFactory.moving(newToken));",
      "",
      "logger_.info(String.format(\"Moving %s from %s to %s.\", localAddress, getLocalToken(), newToken));",
      "...",
      "Map<String, Multimap<Range, InetAddress>> rangesToStreamByTable =newHashMap<String, Multimap<Range, InetAddress>>();",
      "",
      "TokenMetadatatokenMetaClone=tokenMetadata_.cloneAfterAllSettled();",
      "",
      "// for each of the non system tables calculating new ranges",
      "// which current node will handle after move to the new token",
      "for(String table : tablesToProcess)",
      "{",
      "AbstractReplicationStrategy strategy = Table.open(table).getReplicationStrategy();",
      "",
      "Collection<Range> currentRanges = getRangesForEndpoint(table, localAddress);",
      "",
      "Collection<Range> updatedRanges = strategy.getPendingAddressRanges(tokenMetadata_, newToken, localAddress);",
      "",
      "-Multimap<Range, InetAddress> rangeAddresses = strategy.getRangeAddresses(tokenMetaClone);",
      "+Multimap<Range, InetAddress> rangeAddresses = strategy.getRangeAddresses(tokenMetadata_);",
      "",
      "Pair<Set<Range>, Set<Range>>rangesPerTable= calculateStreamAndFetchRanges(currentRanges, updatedRanges);",
      "",
      "...",
      "// calculating endpoints to stream current ranges to if needed",
      "// in some situations node will handle current ranges as part of the new ranges",
      "Multimap<Range, InetAddress> rangeWithEndpoints = HashMultimap.create();",
      "",
      "for(RangetoStream:rangesPerTable.left)",
      "{",
      "List<InetAddress>endpoints= strategy.calculateNaturalEndpoints(toStream.right,tokenMetaClone);",
      "rangeWithEndpoints.putAll(toStream,endpoints);",
      "}",
      "",
      "// associating table with range-to-endpoints map",
      "rangesToStreamByTable.put(table,rangeWithEndpoints);",
      "...",
      "}",
      "",
      "if(!rangesToStreamByTable.isEmpty() || !rangesToFetch.isEmpty())",
      "{...",
      "CountDownLatch streamLatch =streamRanges(rangesToStreamByTable);",
      "...",
      "}",
      "...",
      "}",
      "",
      "privateCountDownLatchstreamRanges(finalMap<String, Multimap<Range, InetAddress>>rangesToStreamByTable)",
      "{",
      "...",
      "for(finalString table : rangesToStreamByTable.keySet())",
      "{",
      "Multimap<Range, InetAddress>rangesWithEndpoints=rangesToStreamByTable.get(table);",
      "...",
      "",
      "finalSet<Map.Entry<Range, InetAddress>> pending =newHashSet<Map.Entry<Range, InetAddress>>(rangesWithEndpoints.entries());",
      "",
      "for(finalMap.Entry<Range, InetAddress>entry:rangesWithEndpoints.entries())",
      "{",
      "finalRange range = entry.getKey();",
      "finalInetAddressnewEndpoint=entry.getValue();",
      "...",
      "StageManager.getStage(Stage.STREAM).execute(newRunnable()",
      "{",
      "public voidrun()",
      "{",
      "StreamOut.transferRanges(newEndpoint,table, Arrays.asList(range),callback, OperationType.UNBOOTSTRAP);",
      "}",
      "});",
      "}",
      "}",
      "returnlatch;",
      "}",
      "",
      "public static voidtransferRanges(InetAddress target, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)",
      "{ ...",
      "StreamOutSession session = StreamOutSession.create(tableName, target, callback);",
      "",
      "logger.info(\"Beginning transfer to {}\", target);",
      "logger.debug(\"Ranges are {}\", StringUtils.join(ranges,\",\"));",
      "...",
      "}",
      "For the incorrect variable “newEndpoint” which is passed into StreamOut.transferRanges() in streamRanges(), trace back to move(), and finds thatrangesToStreamByTableshould be related, and it depends onendpoints. Further, endpoints is denpends on toStream and tokenMetaClone.",
      "List<InetAddress>endpoints= strategy.calculateNaturalEndpoints(toStream.right,tokenMetaClone);"
    ]
  },
  "(3) Root Cause": {
    "p": [
      "Without domain knowledge, it is difficult to get the root cause:",
      "In StorageService.move(), we call Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.moving(newToken));",
      "and then getting the new token metadata in order to calculate where the new endpoint that we should stream to:",
      "TokenMetadata tokenMetaClone = tokenMetadata_.cloneAfterAllSettled();",
      "however, in addLocalApplicationState there is no notification broadcast for the change in local state, so tokenMetadata_ never updates the list of moving nodes, and the tokenMetaClone is still the state of the ring from before the move.",
      "public voidaddLocalApplicationState(ApplicationState state, VersionedValue value)",
      "{",
      "EndpointState epState =endpointStateMap.get(FBUtilities.getLocalAddress());",
      "assertepState !=null;",
      "epState.addApplicationState(state, value);",
      "+doNotifications(FBUtilities.getLocalAddress(), state, value);",
      "",
      "}"
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Fixing the error.",
      "Use Gossiper to broadcast notifications when the local application state is updated.",
      "Fix the calculation of the endpoints to stream from, which should use the old state of the ring, not the new one.",
      "·/src/java/org/apache/cassandra/gms/Gossiper.java",
      "@@ -891,6 +891,7 @@",
      "EndpointState epState = endpointStateMap.get(FBUtilities.getLocalAddress());",
      "assert epState != null;",
      "epState.addApplicationState(state, value);",
      "+doNotifications(FBUtilities.getLocalAddress(), state, value);",
      "}",
      "·/src/java/org/apache/cassandra/service/StorageService.java",
      "@@ -1898,7 +1898,7 @@",
      "// ring ranges and endpoints associated with them",
      "// this used to determine what nodes should we ping about range data",
      "-Multimap<Range, InetAddress> rangeAddresses = strategy.getRangeAddresses(tokenMetaClone);",
      "+Multimap<Range, InetAddress> rangeAddresses = strategy.getRangeAddresses(tokenMetadata_);",
      "",
      "// calculated parts of the ranges to request/stream from/to nodes in the ring",
      "Pair<Set<Range>, Set<Range>> rangesPerTable = calculateStreamAndFetchRanges(currentRanges, updatedRanges)",
      "",
      ""
    ]
  },
  "": {
    "p": [
      ""
    ]
  }
}