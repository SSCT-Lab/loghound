{
  "p": [
    "",
    "ZooKeeper-1732"
  ],
  "ZooKeeper server unable to join established ensemble": {},
  "(1) Log information": {
    "(1.1) Roles in this case": {
      "p": [
        "the inconsistency betweenserver2andserver3makesserver1fail to join the ensemble."
      ]
    },
    "(1.2) Symptoms": {
      "p": [
        "“I have a test in which I do a rolling restart of three ZooKeeper servers and it was failing from time to time.",
        "I ran the tests in a loop until the failure came out and it seems that at some point one of the servers is unable to join the ensemble formed by the other two.”",
        "There are three zk servers. Rolling restart is operated as follows:",
        "step1: start server1, server2, server3 (leader: 3; follower: 1,2)",
        "step2: stop server2, then restart server2",
        "step3: stop server3, then restart server3",
        "step4: stop server1, then restart server1",
        "After server1 restarts, we see the following log printed repeatedly on server 1.",
        "2013-07-19 10:16:45,428 [myid:1] - WARN [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:30101:NIOServerCnxn@354] - Exception causing close of session 0x0 due to java.io.IOException: ZooKeeperServer not running",
        "2013-07-19 10:16:45,428 [myid:1] - DEBUG [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:30101:NIOServerCnxn@358] - IOException stack trace",
        "2013-07-19 10:16:45,428 [myid:1] - INFO [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:30101:NIOServerCnxn@1001] - Closed socket connection for client /127.0.0.1:61907(no session established for client)",
        "The “IOException: ZooKeeperServer not running” shows that currently there is no zk server instance running on server1, which means server1 has always been looking state and not joined the ensemble."
      ]
    }
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "(2.1) When server1 restarts, it issues a leader election, and it sends/receives notifications to/from the peers. server1 has always been looking state, which suggests that the it cannot make election decision based on the notifications received from server2 and server3.",
      "server1 sends the following notifications to the peers (including itself)",
      "2013-07-19 10:16:40,088 [myid:1] - DEBUG [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FastLeaderElection@531] - Sending Notification: 1 (n.leader), 0xba0000006a (n.zxid),0xba(n.round),1 (recipient), 1 (myid), 0xba (n.peerEpoch)",
      "2013-07-19 10:16:40,096 [myid:1] - DEBUG [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FastLeaderElection@531] - Sending Notification: 1 (n.leader), 0xba0000006a (n.zxid),0xba(n.round),2 (recipient), 1 (myid), 0xba (n.peerEpoch)",
      "2013-07-19 10:16:40,096 [myid:1] - DEBUG [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FastLeaderElection@531] - Sending Notification: 1 (n.leader), 0xba0000006a (n.zxid),0xba(n.round),3 (recipient), 1 (myid), 0xba (n.peerEpoch)",
      "The messages server1 receives from server2 and server3.",
      "2013-07-19 10:16:40,097 [myid:1] - INFO [WorkerReceiver[myid=1]:FastLeaderElection@542] - Notification:3 (n.leader), 0xb800000099 (n.zxid),0xb9(n.round),FOLLOWING(n.state),2 (n.sid), 0xb8(n.peerEPoch), LOOKING (my state)",
      "2013-07-19 10:16:40,102 [myid:1] - DEBUG [WorkerReceiver[myid=1]:FastLeaderElection$Messenger$WorkerReceiver@230] - Receive new notification message. My id = 1",
      "2013-07-19 10:16:40,102 [myid:1] - INFO [WorkerReceiver[myid=1]:FastLeaderElection@542] - Notification:3 (n.leader), 0xb900000052 (n.zxid),0xba(n.round),LEADING(n.state),3 (n.sid),0xb9(n.peerEPoch), LOOKING (my state)",
      "From the above messages, we see that the leader is server3, and server2 is in following state, but their n.round and n.peerEpoch are not consistent.",
      "server1 processes these messages in FastLeaderElection.lookForLeader().",
      "",
      "",
      "server1 has one vote from itself. server3 has two votes from server2 and server3, but these two votes are of different n.electionEpoch, so server1 does not think server3 is the leader. That is, server1 does not get election result.",
      "After this, the notifications server1 receives are still the same, so server1 keeps looking and cannot elect the leader.",
      "(2.2) Why server3 and server2 can keep this ensemble (leader-follower relationship) with different n.round?",
      "Since server3 is the leader, it executes Leader.lead(). In the while loop, server3 will periodically check if it has a supporting quorum by calling containsQuorum(), but it only checks the size of the set, regardless of the round.",
      "",
      "(2.3) After server3 restarts, why n.round in server3 and server2 are not consistent?",
      "(2.3.1)",
      "Before step3 (stop server3, then restart server3), server3 is leader, server2 and server1 are followers.",
      "When server3 shuts down, the exception will happen on both server2 and 1. Then server2 and 1 notice that the leader is not working, and they will close the zk server instance (Follower) respectively.",
      "server2 notices the leader’s abnormality first, and starts to close its Follower instance.",
      "2013-07-19 10:16:20,796 [myid:2] - WARN [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:Follower@89] -Exception when following the leader",
      "2013-07-19 10:16:20,796 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:Follower@166] - shutdown called",
      "2013-07-19 10:16:20,796 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FollowerZooKeeperServer@139] - Shutting down",
      "2013-07-19 10:16:20,796 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:ZooKeeperServer@419] - shutting down",
      "...",
      "2013-07-19 10:16:20,811 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:QuorumPeer@670] -LOOKING",
      "2013-07-19 10:16:20,811 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:QuorumPeer@601] - Initializing leader election protocol...",
      "After server2 finishes closing its Follower, it goes into LOOKING state. It starts a new round of election, and sends notifications to the peers.",
      "2013-07-19 10:16:20,827 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@641] - Updating proposal: 2 (newleader), 0xb900000052 (newzxid), 3 (oldleader), 0xb800000099 (oldzxid)",
      "2013-07-19 10:16:20,827 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@740] -New election. My id = 2, proposed zxid=0xb900000052",
      "2013-07-19 10:16:20,827 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@531] -SendingNotification: 2 (n.leader), 0xb900000052 (n.zxid), 0xba (n.round),1 (recipient), 2 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:20,827 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@531] -SendingNotification: 2 (n.leader), 0xb900000052 (n.zxid), 0xba (n.round),2 (recipient), 2 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:20,827 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@531] -SendingNotification: 2 (n.leader), 0xb900000052 (n.zxid), 0xba (n.round),3 (recipient), 2 (myid), 0xb9 (n.peerEpoch)",
      "Then from the following log, we see that server2 receives the notifications not only from itself, but also from server1 and server3. (n.sid indicates the sender)",
      "2013-07-19 10:16:20,843 [myid:2] - DEBUG [WorkerReceiver[myid=2]:FastLeaderElection$Messenger$WorkerReceiver@230] -Receive new notificationmessage. My id = 2",
      "2013-07-19 10:16:20,843 [myid:2] - INFO [WorkerReceiver[myid=2]:FastLeaderElection@542] - Notification: 2 (n.leader), 0xb900000052 (n.zxid),0xba(n.round), LOOKING (n.state),2 (n.sid),0xb9 (n.peerEPoch), LOOKING (my state)",
      "2013-07-19 10:16:20,843 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@558] - id: 2, proposed id: 2, zxid: 0xb900000052, proposed zxid: 0xb900000052",
      "2013-07-19 10:16:20,843 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@810] - Adding vote: from=2, proposed leader=2, proposed zxid=0xb900000052, proposed election epoch=0xba",
      "2013-07-19 10:16:20,858 [myid:2] - DEBUG [WorkerReceiver[myid=2]:FastLeaderElection$Messenger$WorkerReceiver@230] -Receive new notificationmessage. My id = 2",
      "2013-07-19 10:16:20,858 [myid:2] - INFO [WorkerReceiver[myid=2]:FastLeaderElection@542] - Notification:3 (n.leader),0xb800000099 (n.zxid),0xb9(n.round), FOLLOWING (n.state),1 (n.sid), 0xb8 (n.peerEPoch), LOOKING (my state)",
      "2013-07-19 10:16:20,858 [myid:2] - DEBUG [WorkerReceiver[myid=2]:FastLeaderElection$Messenger$WorkerReceiver@230] -Receive new notificationmessage. My id = 2",
      "2013-07-19 10:16:20,858 [myid:2] - INFO [WorkerReceiver[myid=2]:FastLeaderElection@542] - Notification:3 (n.leader),0xb800000099 (n.zxid),0xb9(n.round), LEADING (n.state),3 (n.sid),0xb8 (n.peerEPoch), LOOKING (my state)",
      "So the only possibility is that at this time, server1 has not begun to close its Follower instance, and server3 has not finished shutdown.",
      "The notifications sent by server1 and server3 still keep the previous ensemble information(leader: server3, n.round=0xb9). And server2 processes these notifications in function FastLeaderElection.lookForLeader().",
      "",
      "",
      "Then server2 goes into FOLLOWING state.",
      "2013-07-19 10:16:20,858 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@663] - I'm a participant: 2",
      "2013-07-19 10:16:20,858 [myid:2] - DEBUG [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:FastLeaderElection@493] - About to leave FLE instance:leader=3,zxid=0xb800000099,my id=2, my state=FOLLOWING",
      "2013-07-19 10:16:20,858 [myid:2] - INFO [QuorumPeer[myid=2]/0:0:0:0:0:0:0:0:30102:QuorumPeer@738] - FOLLOWING",
      "(2.3.2)",
      "We have inferred that server1 has not begun to close its Follower instance, and server3 has not finished shutdown, so they can still send the notification to server2.",
      "On server3: when it stops, the two threads WorkerReceiver and sendReceiver will be closed at the end of shutdown, so it can still send the notification.",
      "2013-07-19 10:16:23,819 [myid:3] - INFO [WorkerReceiver[myid=3]:FastLeaderElection$Messenger$WorkerReceiver@340] -WorkerReceiveris down",
      "2013-07-19 10:16:23,824 [myid:3] - INFO [WorkerSender[myid=3]:FastLeaderElection$Messenger$WorkerSender@370] -WorkerSenderis down",
      "On server1: when server1 notices the leader (server3)’s abnormality, it starts to close its Follower instance. From the following log, we see that during closing Follower, server1 receives the notification from server2. And server1 still send the notification to server2.",
      "2013-07-19 10:16:20,796 [myid:1] - WARN [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:Follower@89] -Exception when following the leader",
      "2013-07-19 10:16:20,796 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:Follower@166] -shutdown called",
      "2013-07-19 10:16:20,796 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:NIOServerCnxn@1001] - Closed socket connection for client /127.0.0.1:61653 which had sessionid 0x13ff5cba60a0000",
      "2013-07-19 10:16:20,843 [myid:1] - DEBUG [WorkerReceiver[myid=1]:FastLeaderElection$Messenger$WorkerReceiver@230] -Receive new notificationmessage. My id = 1",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [WorkerReceiver[myid=1]:FastLeaderElection@542] - Notification: 2 (n.leader), 0xb900000052 (n.zxid),0xba(n.round), LOOKING (n.state),2 (n.sid), 0xb9 (n.peerEPoch), FOLLOWING (my state)",
      "2013-07-19 10:16:20,796 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:NIOServerCnxn@1001] - Closed socket connection for client /127.0.0.1:61656 which had sessionid 0x23ff5fc33590000",
      "...",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:NIOServerCnxn@1001] - Closed socket connection for client /127.0.0.1:61661 which had sessionid 0x13ff5ff97af0000",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FollowerZooKeeperServer@139] - Shutting down",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:ZooKeeperServer@419] - shutting down",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FollowerRequestProcessor@105] - Shutting down",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:CommitProcessor@181] - Shutting down",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:FinalRequestProcessor@415] - shutdown of request processor complete",
      "2013-07-19 10:16:20,843 [myid:1] - INFO [QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:30101:SyncRequestProcessor@175] - Shutting down",
      "2013-07-19 10:16:20,858 [myid:1] - INFO [FollowerRequestProcessor:1:FollowerRequestProcessor@95] - FollowerRequestProcessor exited loop!",
      "2013-07-19 10:16:20,858 [myid:1] - INFO [CommitProcessor:1:CommitProcessor@150] - CommitProcessor exited loop!",
      "2013-07-19 10:16:20,858 [myid:1] - INFO [SyncThread:1:SyncRequestProcessor@155] - SyncRequestProcessor exited!",
      "",
      "(2.3.3) When server1 finishes closing Follower instance, it goes into LOOKING state, and starts election. At this time, server2 is in FOLLOWING state (the leader is server3). Since server3 just stops and has not restarted, server1 cannot get election result based on the notification from server2 and itself.",
      "(2.3.4) After server3 restarts, it goes into LOOKING state and starts election. Then it sends notifications to the peers.",
      "2013-07-19 10:16:26,008 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:QuorumPeer@635] - Starting quorum peer",
      "2013-07-19 10:16:26,009 [myid:3] - INFO [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:QuorumPeer@670] -LOOKING",
      "2013-07-19 10:16:26,010 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:QuorumPeer@601] - Initializing leader election protocol...",
      "2013-07-19 10:16:26,010 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@641] - Updating proposal: 3 (newleader), 0xb900000052 (newzxid), -1 (oldleader), 0xffffffffffffffff (oldzxid)",
      "2013-07-19 10:16:26,010 [myid:3] - INFO [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@740] - New election. My id = 3, proposed zxid=0xb900000052",
      "2013-07-19 10:16:26,010 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -Sending Notification: 3 (n.leader),0xb900000052 (n.zxid),0x1(n.round),1 (recipient),3 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:26,011 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -Sending Notification: 3 (n.leader), 0xb900000052 (n.zxid),0x1(n.round),2 (recipient), 3 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:26,011 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -Sending Notification: 3 (n.leader), 0xb900000052 (n.zxid),0x1(n.round),3 (recipient), 3 (myid), 0xb9 (n.peerEpoch)",
      "",
      "Then server3 receives notifications from server1 and server2.",
      "server3 updates its n.round to be 0xba (0xb9+1), and sends notifications to the peers.",
      "2013-07-19 10:16:26,053 [myid:3] - DEBUG [WorkerReceiver[myid=3]:FastLeaderElection$Messenger$WorkerReceiver@230] - Receive new notification message. My id = 3",
      "2013-07-19 10:16:26,053 [myid:3] - INFO [WorkerReceiver[myid=3]:FastLeaderElection@542] - Notification:1 (n.leader),0xb900000052 (n.zxid),0xba(n.round),LOOKING(n.state),1 (n.sid),0xb9(n.peerEPoch), LOOKING (my state)",
      "2013-07-19 10:16:26,055 [myid:3] - DEBUG [WorkerReceiver[myid=3]:FastLeaderElection$Messenger$WorkerReceiver@230] - Receive new notification message. My id = 3",
      "2013-07-19 10:16:26,055 [myid:3] - INFO [WorkerReceiver[myid=3]:FastLeaderElection@542] - Notification:3 (n.leader), 0xb800000099 (n.zxid),0xb9(n.round),FOLLOWING(n.state),2 (n.sid),0xb8(n.peerEPoch), LOOKING (my state)",
      "2013-07-19 10:16:26,061 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@558] - id: 2, proposed id: 3, zxid: 0xb900000052, proposed zxid: 0xb900000052",
      "2013-07-19 10:16:26,061 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@641] - Updating proposal: 3 (newleader), 0xb900000052 (newzxid), 3 (oldleader), 0xb900000052 (oldzxid)",
      "2013-07-19 10:16:26,061 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -SendingNotification: 3 (n.leader), 0xb900000052 (n.zxid),0xba(n.round),1 (recipient), 3 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:26,062 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -Sending Notification: 3 (n.leader), 0xb900000052 (n.zxid),0xba(n.round),2 (recipient), 3 (myid), 0xb9 (n.peerEpoch)",
      "2013-07-19 10:16:26,062 [myid:3] - DEBUG [QuorumPeer[myid=3]/0:0:0:0:0:0:0:0:30103:FastLeaderElection@531] -Sending Notification: 3 (n.leader), 0xb900000052 (n.zxid),0xba(n.round),3 (recipient), 3 (myid), 0xb9 (n.peerEpoch)",
      "On server1:",
      "vote from server1: 1(n.leader), 0xba(n.round), LOOKING (n.state)",
      "vote from server2: 3(n.leader), 0xb9(n.round), FOLLOWING (n.state)",
      "vote from server3: 3(n.leader), 0xba(n.round), LOOKING (n.state)",
      "since server3 is in LOOKING, and n.round is the same (0xba), server1 will update its vote to support server3 (id=3 > id=1).",
      "And server1 will finally get election result: leader: server3, n.round=0xba",
      "Then server1 go into FOLLOWING state.",
      "On server3:",
      "vote from server1: 3(n.leader), 0xba(n.round), LOOKING (n.state)",
      "vote from server2: 3(n.leader), 0xb9(n.round), FOLLOWING (n.state)",
      "vote from server3: 3(n.leader), 0xba(n.round), LOOKING (n.state)",
      "The votes from server1&3 will be put into recvset, and the vote from server2 will be put into outofelection.",
      "server3 will get election result from recvset: leader: server3, n.round=0xba",
      "Then server3 go into LEADING state.",
      "server2 still keeps the state: 3(n.leader), 0xb9(n.round), FOLLOWING. (n.state)",
      "That is why n.round in server3 and server2 are not consistent, but they all treat server3 as leader."
    ]
  },
  "(3) Root Cause": {
    "p": [
      "Before step3 stops, server3 is leader, server2 and server1 are followers. When server3 stops, server2 notices the current leader is not working and closes its follower instance first, and goes into LOOKING state. Then server2 receives the notifications from server3 and server1 which carrying the previous ensemble information and successfully elected server3 as leader. (server1 sends this notification before it closes its follower instance, and server3 sends this notification before it finishes shutdown).",
      "When server3 restarts, server1 is already in LOOKING. When the election finishes, both server3 and server1 have the consistent ensemble information(leader=server3, n.round=0xba). But on server2: leader=server3, n.round=0xb9.",
      "Then server1 stops and restarts. server1 cannot get election result based on the notifications from server2 and server3 due to the inconsistent n.round. So server1 cannot join the ensemble, and cannot instantiate any zookeeper server role."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "When zk server becomes follower and goes into FOLLOWING state, it will update its vote with current leader.",
      "When zk server becomes leader and goes into LEADING state, it will update its vote with current follower.",
      "Loosen the checking of leader election round and zxid when a server joins an existing ensemble. It avoids a corner case in which the servers in an ensemble ended up with different leader election information.",
      "•src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java",
      "",
      "• src/java/main/org/apache/zookeeper/server/quorum/Leader.java",
      "",
      "• src/java/main/org/apache/zookeeper/server/quorum/Learner.java",
      "",
      "• src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java",
      "",
      "",
      ""
    ]
  },
  "(5) How many nodes are involved in the patch": {
    "p": [
      "ZK server(s).",
      "",
      ""
    ]
  }
}