{
  "p": [
    "MAPREDUCE-4074",
    "Client continuously retries to RM When RM goes down before launching Application Master"
  ],
  "(1) Log information": {
    "p": [
      "Client continuously tries to RM and logs the below messages when the RM goes down before launching App Master.",
      "",
      "28/03/12 07:15:03 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 0 time(s).",
      "28/03/12 07:15:04 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 1 time(s).",
      "28/03/12 07:15:05 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 2 time(s).",
      "28/03/12 07:15:06 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 3 time(s).",
      "28/03/12 07:15:07 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 4 time(s).",
      "28/03/12 07:15:08 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 5 time(s).",
      "28/03/12 07:15:09 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 6 time(s).",
      "28/03/12 07:15:10 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 7 time(s).",
      "28/03/12 07:15:11 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 8 time(s).",
      "28/03/12 07:15:12 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 9 time(s).",
      "28/03/12 07:15:13 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 0 time(s).",
      "28/03/12 07:15:14 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 1 time(s).",
      "28/03/12 07:15:15 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 2 time(s).",
      "28/03/12 07:15:16 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 3 time(s).",
      "28/03/12 07:15:17 INFO ipc.Client: Retrying connect to server: linux-f330.site/10.18.40.182:8032. Already tried 4 time(s)."
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "The printed logs are controlled by the following code when client tries to connect RM through RPC.",
      "private synchronizedObjectinvoke(String method, Class argClass,",
      "Object args)throwsYarnRemoteException {",
      "Method methodOb =null;",
      "try{",
      "methodOb = MRClientProtocol.class.getMethod(method, argClass);",
      "}catch(SecurityException e) {",
      "throw newYarnException(e);",
      "}catch(NoSuchMethodException e) {",
      "throw newYarnException(\"Method name mismatch\", e);",
      "}",
      "while(true) {",
      "try{",
      "returnmethodOb.invoke(getProxy(), args);",
      "}catch(YarnRemoteException yre) {",
      "LOG.warn(\"Exception thrown by remote end.\", yre);",
      "throwyre;",
      "}catch(InvocationTargetException e) {",
      "if(e.getTargetException()instanceofYarnRemoteException) {",
      "LOG.warn(\"Error from remote end: \"+ e",
      ".getTargetException().getLocalizedMessage());",
      "LOG.debug(\"Tracing remote error \", e.getTargetException());",
      "throw(YarnRemoteException) e.getTargetException();",
      "}",
      "LOG.debug(\"Failed to contact AM/History for job \"+jobId+",
      "\" retrying..\", e.getTargetException());",
      "// Force reconnection by setting the proxy to null.",
      "realProxy=null;",
      "}catch(Exception e) {",
      "LOG.debug(\"Failed to contact AM/History for job \"+jobId",
      "+\" Will retry..\", e);",
      "// Force reconnection by setting the proxy to null.",
      "realProxy=null;",
      "}",
      "}",
      "}",
      "Here, when RM goes down, java.lang.reflect.UndeclaredThrowableException will be thrown, and this exception is caught and retry.",
      "",
      "When client tries to connect RM through proxy and fails, the following method will be invoked.",
      "private voidhandleConnectionFailure(",
      "intcurRetries,intmaxRetries, IOException ioe)throwsIOException {",
      "closeConnection();",
      "",
      "// throw the exception if the maximum number of retries is reached",
      "if(curRetries >= maxRetries) {",
      "throwioe;",
      "}",
      "// otherwise back off and retry",
      "try{",
      "Thread.sleep(1000);",
      "}catch(InterruptedException ignored) {}",
      "",
      "LOG.info(\"Retrying connect to server: \"+server+",
      "\". Already tried \"+ curRetries +\" time(s).\");",
      "}"
    ]
  },
  "(3) Root Cause": {
    "p": [
      "When AM finishes, it will contact historyServer, and retry is needed;",
      "when AM attempts, it will contact the other AM, and retry is needed.",
      "If RM or historyServer goes down, AM should not retry.",
      ""
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Fixing the failure.",
      "â€¢hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/ClientServiceDelegate.java",
      "private synchronizedObjectinvoke(String method, Class argClass,",
      "-Object args)throwsYarnRemoteException {",
      "+Object args) throws IOException {",
      "Method methodOb =null;",
      "try{",
      "methodOb = MRClientProtocol.class.getMethod(method, argClass);",
      "}catch(SecurityException e) {",
      "throw newYarnException(e);",
      "}catch(NoSuchMethodException e) {",
      "throw newYarnException(\"Method name mismatch\", e);",
      "}",
      "-while(true) {",
      "+int maxRetries = this.conf.getInt(",
      "+MRJobConfig.MR_CLIENT_MAX_RETRIES,",
      "+MRJobConfig.DEFAULT_MR_CLIENT_MAX_RETRIES);",
      "+IOException lastException = null;",
      "+while (maxRetries > 0) {",
      "try{",
      "returnmethodOb.invoke(getProxy(), args);",
      "}catch(YarnRemoteException yre) {",
      "LOG.warn(\"Exception thrown by remote end.\", yre);",
      "throwyre;",
      "}catch(InvocationTargetException e) {",
      "if(e.getTargetException()instanceofYarnRemoteException) {",
      "LOG.warn(\"Error from remote end: \"+ e",
      ".getTargetException().getLocalizedMessage());",
      "LOG.debug(\"Tracing remote error \", e.getTargetException());",
      "throw(YarnRemoteException) e.getTargetException();",
      "}",
      "LOG.debug(\"Failed to contact AM/History for job \"+jobId+",
      "\" retrying..\", e.getTargetException());",
      "// Force reconnection by setting the proxy to null.",
      "realProxy=null;",
      "+// HS/AMS shut down",
      "+maxRetries--;",
      "+lastException = new IOException(e.getMessage());",
      "+",
      "}catch(Exception e) {",
      "LOG.debug(\"Failed to contact AM/History for job \"+jobId",
      "+\" Will retry..\", e);",
      "// Force reconnection by setting the proxy to null.",
      "realProxy=null;",
      "+// RM shutdown",
      "+maxRetries--;",
      "+lastException = new IOException(e.getMessage());",
      "",
      "}",
      "}",
      "+throw lastException;",
      "",
      "}"
    ]
  },
  "(5) How many nodes are involved in the patch": {
    "p": [
      "client",
      "",
      "",
      "",
      "",
      "",
      "",
      ""
    ]
  }
}