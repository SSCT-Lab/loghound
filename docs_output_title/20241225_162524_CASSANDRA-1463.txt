{
  "p": [
    "Cassandra-1463",
    "Failed bootstrap can cause NPE in batch_mutate on every node, taking down the entire cluster"
  ],
  "(1) Log information": {
    "p": [
      "In adding a node to the cluster, the bootstrap failed (still investigating the cause). An hour later, the entire cluster failed, preventing any writes from being accepted. This exception started being printed to the logs:",
      "INFO [Timer-0] 2010-09-03 12:23:33,282 Gossiper.java (line 402) FatClient /10.251.243.191 has been silent for 3600000ms, removing from gossip",
      "ERROR [Timer-0] 2010-09-03 12:23:33,318 Gossiper.java (line 99) Gossip error",
      "java.util.ConcurrentModificationException",
      "at java.util.Hashtable$Enumerator.next(Hashtable.java:1048)",
      "at org.apache.cassandra.gms.Gossiper.doStatusCheck(Gossiper.java:383)",
      "at org.apache.cassandra.gms.Gossiper$GossipTimerTask.run(Gossiper.java:93)",
      "at java.util.TimerThread.mainLoop(Timer.java:534)",
      "at java.util.TimerThread.run(Timer.java:484)",
      "ERROR [pool-1-thread-69153] 2010-09-03 12:23:33,857 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "at org.apache.cassandra.gms.FailureDetector.isAlive(FailureDetector.java:135)",
      "at org.apache.cassandra.locator.AbstractReplicationStrategy.getHintedEndpoints(AbstractReplicationStrategy.java:85)",
      "at org.apache.cassandra.service.StorageProxy.mutateBlocking(StorageProxy.java:204)",
      "at org.apache.cassandra.thrift.CassandraServer.batch_mutate(CassandraServer.java:415)",
      "at org.apache.cassandra.thrift.Cassandra$Processor$batch_mutate.process(Cassandra.java:1651)",
      "at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.java:1166)",
      "at org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:167)",
      "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)",
      "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)",
      "at java.lang.Thread.run(Thread.java:636)",
      "ERROR [pool-1-thread-69154] 2010-09-03 12:23:33,869 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "at org.apache.cassandra.gms.FailureDetector.isAlive(FailureDetector.java:135)",
      "at org.apache.cassandra.locator.AbstractReplicationStrategy.getHintedEndpoints(AbstractReplicationStrategy.java:85)",
      "at org.apache.cassandra.service.StorageProxy.mutateBlocking(StorageProxy.java:204)",
      "at org.apache.cassandra.thrift.CassandraServer.batch_mutate(CassandraServer.java:415)",
      "at org.apache.cassandra.thrift.Cassandra$Processor$batch_mutate.process(Cassandra.java:1651)",
      "at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.java:1166)",
      "at org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:167)",
      "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)",
      "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)",
      "at java.lang.Thread.run(Thread.java:636)",
      "Aftera large number of iterationsof that (at least thousands), the printed exception was shortened to",
      "ERROR [pool-1-thread-68869] 2010-09-03 12:39:22,857 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "ERROR [pool-1-thread-68869] 2010-09-03 12:39:22,883 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "ERROR [pool-1-thread-68869] 2010-09-03 12:39:22,894 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "ERROR [pool-1-thread-68970] 2010-09-03 12:39:22,985 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "ERROR [pool-1-thread-68970] 2010-09-03 12:39:23,084 Cassandra.java (line 1659) Internal error processing batch_mutate",
      "java.lang.NullPointerException",
      "Rolling a restart over the cluster fixed it, but every node had to be restarted before it started accepting writes again."
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "The long NPE stack trace can help locate the null variable:",
      "public booleanisAlive(InetAddress ep)",
      "{",
      "/* If the endpoint in question is the local endpoint return true. */",
      "InetAddress localHost = FBUtilities.getLocalAddress();",
      "if(localHost.equals(ep))",
      "return true;",
      "",
      "/* Incoming port is assumed to be the Storage port. We need to change it to the control port */",
      "EndpointStateepState= Gossiper.instance.getEndpointStateForEndpoint(ep);",
      "returnepState.isAlive();",
      "}"
    ]
  },
  "(3) Root Cause": {
    "p": [
      "When the node fails to bootstrap, the IP of node is only cleared by some of the records in gossip, indicated by the INFO:",
      "INFO [Timer-0] 2010-09-03 12:23:33,282 Gossiper.java (line 402) FatClient /10.251.243.191 has been silent for 3600000ms, removing from gossip",
      "But the token metadata of this failed node is not cleared."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Fixing the error. Remove all the related records of the failed node in gossip.",
      "One of the fixed files are on the NPE stack trace.",
      "·src/java/org/apache/cassandra/gms/FailureDetector.java",
      "",
      "public boolean isAlive(InetAddress ep)",
      "{",
      "-/* If the endpoint in question is the local endpoint return true. */",
      "-InetAddress localHost = FBUtilities.getLocalAddress();",
      "-if (localHost.equals(ep))",
      "+if (ep.equals(FBUtilities.getLocalAddress()))",
      "return true;",
      "",
      "-/* Incoming port is assumed to be the Storage port. We need to change it to the control port */",
      "EndPointState epState = Gossiper.instance.getEndPointStateForEndPoint(ep);",
      "-return epState.isAlive();",
      "+// we could assert not-null, but having isAlive fail screws a node over so badly that",
      "+// it's worth being defensive here so minor bugs don't cause disproportionate",
      "+// badness. (See CASSANDRA-1463 for an example).",
      "+if (epState == null)",
      "+logger_.error(\"unknown endpoint \" + ep);",
      "+return epState != null && epState.isAlive();",
      "}",
      "",
      "public void report(InetAddress ep)",
      "",
      "·src/java/org/apache/cassandra/gms/IEndPointStateChangeSubscriber.java",
      "@@ -45,4 +45,6 @@",
      "public void onAlive(InetAddress endpoint, EndPointState state);",
      "",
      "public void onDead(InetAddress endpoint, EndPointState state);",
      "+",
      "+public void onRemove(InetAddress endpoint);",
      "}",
      "",
      "·src/java/org/apache/cassandra/gms/Gossiper.java",
      "@@ -216,6 +216,10 @@",
      "*/",
      "public void removeEndPoint(InetAddress endpoint)",
      "{",
      "+// do subscribers first so anything in the subscriber that depends on gossiper state won't get confused",
      "+for (IEndPointStateChangeSubscriber subscriber : subscribers_)",
      "+subscriber.onRemove(endpoint);",
      "+",
      "liveEndpoints_.remove(endpoint);",
      "unreachableEndpoints_.remove(endpoint);",
      "endPointStateMap_.remove(endpoint);",
      "",
      "",
      "·src/java/org/apache/cassandra/service/StorageService.java",
      "@@ -657,7 +657,7 @@",
      "{",
      "restoreReplicaCount(endPoint);",
      "Gossiper.instance.removeEndPoint(endPoint);",
      "-tokenMetadata_.removeEndpoint(endPoint);",
      "+// gossiper onRemove will take care of TokenMetadata",
      "}",
      "",
      "/**",
      "@@ -874,8 +874,14 @@",
      "deliverHints(endpoint);",
      "}",
      "",
      "-public void onDead(InetAddress endpoint, EndPointState state)",
      "+public void onRemove(InetAddress endpoint)",
      "{",
      "+tokenMetadata_.removeEndpoint(endpoint);",
      "+calculatePendingRanges();",
      "+}",
      "+",
      "+public void onDead(InetAddress endpoint, EndPointState state)",
      "+{",
      "MessagingService.instance.convict(endpoint);",
      "}",
      "",
      "·src/java/org/apache/cassandra/locator/TokenMetadata.java",
      "@@ -172,27 +172,13 @@",
      "}",
      "}",
      "",
      "-public void removeLeavingEndPoint(InetAddress endpoint)",
      "+public void removeEndpoint(InetAddress endpoint)",
      "{",
      "assert endpoint != null;",
      "",
      "lock.writeLock().lock();",
      "try",
      "{",
      "-leavingEndPoints.remove(endpoint);",
      "-}",
      "-finally",
      "-{",
      "-lock.writeLock().unlock();",
      "-}",
      "-}",
      "-",
      "-public void removeEndpoint(InetAddress endpoint)",
      "-{",
      "-assert tokenToEndPointMap.containsValue(endpoint);",
      "-lock.writeLock().lock();",
      "-try",
      "-{",
      "bootstrapTokens.inverse().remove(endpoint);",
      "tokenToEndPointMap.inverse().remove(endpoint);",
      "leavingEndPoints.remove(endpoint)",
      "",
      "",
      "",
      ""
    ]
  }
}