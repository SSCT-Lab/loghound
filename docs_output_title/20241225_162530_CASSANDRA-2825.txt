{
  "p": [
    "Cassandra-2825",
    "Auto bootstrapping the 4th node in a 4 node cluster doesn't work, when no token explicitly assigned in config"
  ],
  "(1) Log information": {
    "p": [
      "This was done in sequence. A, B, C, and D. Node A with token 0 explicitly set in config. The rest with auto_bootstrap: true and no token explicitly assigned. B and C work as expected. D ends up stealing C's token.",
      "from system.log on C:",
      "INFO [GossipStage:1] 2011-06-24 16:40:41,947 Gossiper.java (line 638) Node /10.171.47.226 is now part of the cluster",
      "INFO [GossipStage:1] 2011-06-24 16:40:41,947 Gossiper.java (line 606) InetAddress /10.171.47.226 is now UP",
      "INFO [GossipStage:1] 2011-06-24 16:42:09,432 StorageService.java (line 769) Nodes /10.171.47.226 and /10.171.55.77 have the same token 61078635599166706937511052402724559481. /10.171.47.226 is the new owner",
      "WARN[GossipStage:1] 2011-06-24 16:42:09,432 TokenMetadata.java (line 120) Token 61078635599166706937511052402724559481changing ownership from/10.171.55.77to/10.171.47.226"
    ]
  },
  "(2) How to figure out the root cause based on logs": {
    "p": [
      "Based on the source code, the last two log entries are printed in handleStateNormal() and updateNormalToken() respectively.",
      "private voidhandleStateNormal(InetAddress endpoint, String[] pieces)",
      "{...",
      "InetAddress currentOwner =tokenMetadata_.getEndpoint(token);",
      "if(currentOwner ==null) {...}",
      "else if(endpoint.equals(currentOwner))",
      "{tokenMetadata_.updateNormalToken(token, endpoint);",
      "}",
      "else if(Gossiper.instance.compareEndpointStartup(endpoint, currentOwner) >0)",
      "{logger_.info(String.format(\"Nodes %s and %s have the same token %s. %s is the new owner\",",
      "endpoint, currentOwner, token, endpoint));",
      "tokenMetadata_.updateNormalToken(token, endpoint);",
      "...",
      "}",
      "...",
      "}",
      "public voidupdateNormalToken(Token token, InetAddress endpoint)",
      "{...",
      "lock.writeLock().lock();",
      "try",
      "{bootstrapTokens.inverse().remove(endpoint);",
      "tokenToEndpointMap.inverse().remove(endpoint);",
      "InetAddress prev =tokenToEndpointMap.put(token, endpoint);",
      "if(!endpoint.equals(prev))",
      "{if(prev !=null)",
      "logger.warn(\"Token \"+ token +\" changing ownership from \"+ prev +\" to \"+ endpoint);",
      "sortedTokens= sortTokens();",
      "}",
      "leavingEndpoints.remove(endpoint);",
      "removeFromMoving(endpoint);// also removing this endpoint from moving",
      "invalidateCaches();",
      "}",
      "finally",
      "{",
      "lock.writeLock().unlock();",
      "}",
      "}",
      "The 4th node obtains the incorrect token during its bootstrap in StorageService.java:",
      "/** return a token to which if a node bootstraps it will get about 1/2 of this node's range */",
      "publicTokengetBootstrapToken()",
      "{...",
      "List<DecoratedKey> keys =newArrayList<DecoratedKey>();",
      "for(ColumnFamilyStore cfs : ColumnFamilyStore.all())",
      "{",
      "for(DecoratedKey key : cfs.allKeySamples())",
      "{",
      "if(range.contains(key.token))",
      "keys.add(key);",
      "}",
      "}",
      "FBUtilities.sortSampledKeys(keys, range);",
      "Token token = keys.size() < 3",
      "? partitioner.midpoint(range.left, range.right)",
      ": keys.get(keys.size() / 2).token;",
      "// Hack to prevent giving nodes tokens with DELIMITER_STR in them (which is fine in a row key/token)",
      "if(tokeninstanceofStringToken)",
      "{",
      "token =newStringToken(((String)token.token).replaceAll(VersionedValue.DELIMITER_STR,\"\"));",
      "if(tokenMetadata_.getTokenToEndpointMap().containsKey(token))",
      "throw newRuntimeException(\"Unable to compute unique token for new node -- specify one manually with initial_token\");",
      "}",
      "returntoken;",
      "}"
    ]
  },
  "(3) Root Cause": {
    "p": [
      "If a cluster has no data just start it up without bootstrapping, but we should not hand out tokens that are already in use."
    ]
  },
  "(4) Fixing Method": {
    "p": [
      "Fixing the error. Exclude the system key sample from key sampling when choosing a token. Using the midpoint method when there is no data other than the system key sample. Check token conflicts and throw an exception.",
      "Â·src/java/org/apache/cassandra/service/StorageService.java",
      "@@ -1743,6 +1743,8 @@ public class StorageService implements IEndpointStateChangeSubscriber, StorageSe",
      "List<DecoratedKey> keys = new ArrayList<DecoratedKey>();",
      "for (ColumnFamilyStore cfs : ColumnFamilyStore.all())",
      "{",
      "+ if (cfs.table.name.equals(Table.SYSTEM_TABLE))",
      "+ continue;",
      "for (DecoratedKey key : cfs.allKeySamples())",
      "{",
      "if (range.contains(key.token))",
      "@@ -1751,9 +1753,19 @@ public class StorageService implements IEndpointStateChangeSubscriber, StorageSe",
      "}",
      "FBUtilities.sortSampledKeys(keys, range);",
      "",
      "- Token token = keys.size() < 3",
      "- ? partitioner.midpoint(range.left, range.right)",
      "- : keys.get(keys.size() / 2).token;",
      "+ Token token;",
      "+ if (keys.size() < 3)",
      "+ {",
      "+ token = partitioner.midpoint(range.left, range.right);",
      "+ logger_.debug(\"Used midpoint to assign token \" + token);",
      "+ }",
      "+ else",
      "+ {",
      "+ token = keys.get(keys.size() / 2).token;",
      "+ logger_.debug(\"Used key sample of size \" + keys.size() + \" to assign token \" + token);",
      "+ }",
      "+ if (tokenMetadata_.getEndpoint(token) != null && tokenMetadata_.isMember(tokenMetadata_.getEndpoint(token)))",
      "+ throw new RuntimeException(\"Chose token \" + token + \" which is already in use by \" + tokenMetadata_.getEndpoint(token) + \" -- specify one manually with initial_token\");",
      "// Hack to prevent giving nodes tokens with DELIMITER_STR in them (which is fine in a row key/token)",
      "if (token instanceof StringToken)",
      "{",
      "",
      ""
    ]
  }
}